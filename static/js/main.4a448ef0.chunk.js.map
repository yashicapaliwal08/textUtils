{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newtext","toLowerCase","split","i","length","toUpperCase","substr","join","showAlert","newText","document","getElementById","select","navigator","clipboard","writeText","wordCount","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setmode","setalert","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4a448ef0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li> */}\r\n          </ul>\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\nNavbar.defaultProps = {\r\n  title: \"Set Title here\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"Uppercase was clicked\", +text);\r\n    let newtext = text.toUpperCase();\r\n    setText(newtext);\r\n    props.showAlert(\"Converted to UPPERCASE\", \"success\");\r\n  };\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"On change\");\r\n    setText(event.target.value);\r\n  };\r\n  const handleLoClick = () => {\r\n    let newtext = text.toLowerCase();\r\n    setText(newtext);\r\n    props.showAlert(\"Converted to Lowercase\", \"success\");\r\n  };\r\n  const handleClearClick = () => {\r\n    let newtext = \"\";\r\n    setText(newtext);\r\n    props.showAlert(\"Cleared Text\", \"success\");\r\n  };\r\n  const handleAlternatingClick = () => {\r\n    var newtext = text.toLowerCase().split(\"\");\r\n    for (var i = 0; i < newtext.length; i += 2) {\r\n      newtext[i] = newtext[i].toUpperCase();\r\n    }\r\n    setText(newtext.join(\"\"));\r\n    props.showAlert(\"Converted to AlTeRnAtInG TeXt\", \"success\");\r\n  };\r\n  const handleCapitalizedClick = () => {\r\n    let newtext = text.toLowerCase().split(\" \");\r\n    for (let i = 0; i < newtext.length; i++) {\r\n      newtext[i] = newtext[i][0].toUpperCase() + newtext[i].substr(1);\r\n    }\r\n    setText(newtext.join(\" \"));\r\n    props.showAlert(\"Every Word's First Letter Is Capitalized\", \"success\");\r\n  };\r\n  const handlesenClick = () => {\r\n    let newtext = text.toLowerCase().split(\".\");\r\n    for (let i = 0; i < newtext.length; i++) {\r\n      newtext[i] = newtext[i][0].toUpperCase() + newtext[i].substr(1);\r\n    }\r\n    setText(newtext.join(\".\"));\r\n    props.showAlert(\"Converted to Sentence form\", \"success\");\r\n  };\r\n  const handleCopyClick = () => {\r\n    var text = document.getElementById(\"MyBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Text Cpoied!!!!\", \"success\");\r\n  };\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces removed\", \"success\");\r\n  };\r\n  var wordCount = (text) => {\r\n    if (text === \"\") return 0;\r\n    else\r\n      return text[text.length - 1] === \" \"\r\n        ? text.split(\" \").length - 1\r\n        : text.split(\" \").length;\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  //text=\"New text\"// wrong way to change the text\r\n  //   setText(\"New text\");\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n            id=\"MyBox\"\r\n            rows=\"5\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handlesenClick}>\r\n          Sentence case\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\r\n          Convert to UPPERCASE\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2 my-2\" onClick={handleLoClick}>\r\n          Convert to lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>\r\n          Clear Text\r\n        </button>\r\n        <button\r\n          className=\"btn btn-primary mx-2\"\r\n          onClick={handleAlternatingClick}\r\n        >\r\n          Convert to AlTeRnAtInG TeXt\r\n        </button>\r\n        <button\r\n          className=\"btn btn-primary my-2\"\r\n          onClick={handleCapitalizedClick}\r\n        >\r\n          Convert to Capitalized case\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleCopyClick}>\r\n          Copy Text\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-2\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h1>Your text summary</h1>\r\n        <p>\r\n          {wordCount(text)} words,{text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : \"Enter something to preview here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  const [alert, setalert] = useState(null);\n  const setAlert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"#0d0a46\";\n      setAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"Text Analyzer and Converter-Dark\";\n    } else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      setAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"Text Analyzer and Converter\";\n    }\n  };\n  return (\n    <>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" /> */}\n        {/* <Navbar /> */}\n        {/* <Router>\n        \n        \n          <Switch> */}\n        {/* /users-->Component 1\n            /users/home-->-->Component 2 */}\n        {/* <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\"> */}\n        <TextForm\n          showAlert={setAlert}\n          heading=\"Enter the text to analyze\"\n          mode={mode}\n        />\n        {/* </Route>\n          </Switch> */}\n      </div>\n      {/* // </Router> */}\n    </>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}